-- 📚 COLLEGE ANALYTICS SQL QUERIES
-- Author: [Your Name]
-- Description: Set of advanced SQL queries to analyze academic, operational, and strategic aspects of a university database

-- ------------------------------
-- 🎓 STUDENT-CENTRIC ANALYSIS
-- ------------------------------

-- 1. 🔍 Class Overlap Detection
-- Q: How can we detect if a student is enrolled in overlapping classes in the same term?
SELECT e.student_id, cs1.course_id AS course1, cs2.course_id AS course2, cs1.day, cs1.start_time, cs1.end_time
FROM enrollment e
JOIN classschedule cs1 ON e.course_id = cs1.course_id
JOIN classschedule cs2 ON e.course_id = cs2.course_id AND cs1.course_id <> cs2.course_id
WHERE cs1.day = cs2.day AND cs1.start_time < cs2.end_time AND cs1.end_time > cs2.start_time;

-- 2. 📊 Course Load Monitoring
-- Q: Are students taking more than 18 credits in a term?
SELECT e.student_id, e.term_id, SUM(c.credits) AS total_credits
FROM enrollment e
JOIN course c ON e.course_id = c.course_id
GROUP BY e.student_id, e.term_id
HAVING total_credits > 18;

-- 3. ⚠️ Dropout Risk Analysis
-- Q: Which students are most at risk of dropping out based on course completions?
SELECT student_id, COUNT(*) AS withdrawn_courses
FROM course_completion
WHERE grade IS NULL
GROUP BY student_id
ORDER BY withdrawn_courses DESC;

-- 4. 🏛 Department-wise Enrollment Trends
-- Q: Which departments are gaining or losing students across terms?
SELECT d.department_name, t.name AS term, COUNT(e.student_id) AS student_count
FROM enrollment e
JOIN student s ON e.student_id = s.student_id
JOIN department d ON s.department_id = d.department_id
JOIN term t ON e.term_id = t.term_id
GROUP BY d.department_name, t.name
ORDER BY t.name;

-- 5. 📈 Admission Forecasting
-- Q: Can we predict future admissions based on historical data?
SELECT YEAR(admission_date) AS year, COUNT(*) AS num_students
FROM student
GROUP BY YEAR(admission_date)
ORDER BY year;

-- ------------------------------
-- 👨‍🏫 PROFESSOR & COURSE ALLOCATION
-- ------------------------------

-- 6. ⬇️ Underutilized Professors
-- Q: Which professors are teaching low-enrollment courses?
SELECT pc.professor_id, pc.course_id, COUNT(e.student_id) AS enrollment_count
FROM professor_course pc
LEFT JOIN enrollment e ON pc.course_id = e.course_id AND pc.term_id = e.term_id
GROUP BY pc.professor_id, pc.course_id
HAVING enrollment_count < 5;

-- 7. ⬆️ Overbooked Professors
-- Q: Are any professors teaching more than 3 courses in a term?
SELECT professor_id, term_id, COUNT(*) AS course_count
FROM professor_course
GROUP BY professor_id, term_id
HAVING course_count > 3;

-- 8. 🛑 Course Cancellation Criteria
-- Q: Which courses have low average enrollment and can be considered for cancellation?
SELECT course_id, AVG(enrollments) AS avg_enrollment
FROM (
  SELECT course_id, term_id, COUNT(student_id) AS enrollments
  FROM enrollment
  GROUP BY course_id, term_id
) sub
GROUP BY course_id
HAVING avg_enrollment < 5;

-- 9. 🔁 Cross-Department Teaching
-- Q: How many professors are teaching outside their department?
SELECT p.professor_id, p.department_id AS prof_dept, c.department_id AS course_dept
FROM professor_course pc
JOIN professor p ON pc.professor_id = p.professor_id
JOIN course c ON pc.course_id = c.course_id
WHERE p.department_id <> c.department_id;

-- 10. 🔄 Future Load Balancing
-- Q: If student count drops by 50%, how should teaching loads be adjusted?
SELECT professor_id, COUNT(*) * 0.5 AS adjusted_course_load
FROM professor_course
GROUP BY professor_id;

-- ------------------------------
-- 📅 COURSE & SCHEDULE MANAGEMENT
-- ------------------------------

-- 11. 🚀 High-Demand Courses
-- Q: Which courses have more than 30 students enrolled?
SELECT course_id, COUNT(*) AS enrolled
FROM enrollment
GROUP BY course_id
HAVING enrolled > 30;

-- 12. 🔗 Prerequisite Chain Analysis
-- Q: Are students blocked due to missing prerequisites?
-- ⚠️ Placeholder – requires prerequisite table

-- 13. ⏰ Clash in Course Schedules
-- Q: Are students enrolled in courses with schedule conflicts?
SELECT s.student_id, cs1.course_id, cs2.course_id, cs1.day, cs1.start_time, cs1.end_time
FROM enrollment e1
JOIN classschedule cs1 ON e1.course_id = cs1.course_id
JOIN enrollment e2 ON e1.student_id = e2.student_id AND e1.course_id <> e2.course_id
JOIN classschedule cs2 ON e2.course_id = cs2.course_id
JOIN student s ON e1.student_id = s.student_id
WHERE cs1.day = cs2.day AND cs1.start_time < cs2.end_time AND cs1.end_time > cs2.start_time;

-- 14. 📘 Average Credits per Student per Term
-- Q: What’s the average credit load per student per term?
SELECT student_id, term_id, AVG(c.credits) AS avg_credits
FROM enrollment e
JOIN course c ON e.course_id = c.course_id
GROUP BY student_id, term_id;

-- 15. ✅ Course Completion Rates
-- Q: What percent of students completed each course?
SELECT course_id, term_id,
       COUNT(CASE WHEN grade IS NOT NULL THEN 1 END) * 100.0 / COUNT(*) AS completion_rate
FROM course_completion
GROUP BY course_id, term_id;

-- ------------------------------
-- 🧠 OPERATIONAL & STRATEGIC ANALYSIS
-- ------------------------------

-- 16. 💸 Budget Optimization
-- Q: How can we reduce cost if admissions drop?
SELECT professor_id, COUNT(DISTINCT course_id) AS courses_taught,
       SUM(enroll_count) AS total_enrollment
FROM (
    SELECT pc.professor_id, pc.course_id,
           COUNT(e.student_id) AS enroll_count
    FROM professor_course pc
    LEFT JOIN enrollment e ON pc.course_id = e.course_id AND pc.term_id = e.term_id
    GROUP BY pc.professor_id, pc.course_id
) AS sub
GROUP BY professor_id
ORDER BY total_enrollment;

-- 17. 🏢 Campus Resource Load
-- Q: Which rooms or buildings are over-utilized?
SELECT room_id, COUNT(*) AS usage_count
FROM classschedule
GROUP BY room_id
ORDER BY usage_count DESC;

-- 18. 👥 Student-Faculty Ratio Trends
-- Q: How is the student-to-faculty ratio trending?
SELECT t.name, COUNT(DISTINCT e.student_id) AS students, COUNT(DISTINCT pc.professor_id) AS professors,
       COUNT(DISTINCT e.student_id) * 1.0 / COUNT(DISTINCT pc.professor_id) AS ratio
FROM term t
JOIN enrollment e ON t.term_id = e.term_id
JOIN professor_course pc ON t.term_id = pc.term_id
GROUP BY t.name;

-- 19. 🌍 International vs Domestic Enrollment
-- Q: What is the breakdown of international vs domestic students?
SELECT is_international, COUNT(*) AS student_count
FROM student
GROUP BY is_international;

-- 20. 🆕 Impact of New Policies or Majors
-- Q: Did new programs result in increased enrollment?
SELECT department_id, YEAR(admission_date) AS year, COUNT(*) AS new_students
FROM student
GROUP BY department_id, year
ORDER BY department_id, year;
